import java.io.BufferedInputStream
import java.util.StringTokenizer

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    class Scanner() {
        private val reader = BufferedInputStream(System.`in`).bufferedReader()
        private var st: StringTokenizer? = null
        fun next(): String {
            while (!(st?.hasMoreTokens() ?: false)) st = StringTokenizer(reader.readLine())
            return st!!.nextToken()
        }
    }
    val sc = Scanner()
    // Failed to predict input format
    val N = sc.next().toInt()
    val S = StringArray(N)
    for (i in 0 until N) {
        S[i] = sc.next()
    }
    solve(N, S)
}

fun solve(N: Int, S: Array<String>) {
    val times = S.map {
        it.split("-")
            .map { it.toInt() }
    }
        .sortedBy { it[0] }
        .map { Pair(ceilToFiveBefore(it[0]), ceilToFiveAfter(it[1])) }
    var ans = mutableListOf<Pair<Int, Int>>()
    var start = times[0].first
    var end = times[0].second
    for (i in 1 until N) {
        if (times[i].first <= end) {
            end = Math.max(end, times[i].second)
        } else {
            ans.add(Pair(start, end))
            start = times[i].first
            end = times[i].second
        }
    }
    ans.add(Pair(start, end))

    for (a in ans) {
        var a1 = "${a.first}".padStart(4, '0')
        var a2 = "${a.second}".padStart(4, '0')
        println("$a1-$a2")
    }
}

fun ceilToFiveBefore(n: Int): Int {
    val m = n % 10
    if (m <= 4) {
        return n - m
    } else { return n - m + 5 }
}
fun ceilToFiveAfter(n: Int): Int {
    val m = n % 10
    if (m == 0) { return n }
    if (m <= 5) {
        return n - m + 5
    } else { return n - m + 10 }
}
