import java.io.BufferedInputStream
import java.util.StringTokenizer

const val YES = "Yes"
const val NO = "No"

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> = Array<String>(size, init)
    // fun iterateTokens(): Iterator<String> {
    //     val reader = BufferedInputStream(System.`in`).bufferedReader()
    //     return reader.use { it.readText() }.splitToSequence(" ", "\n").iterator()
    // }
    fun iterateTokens(): StringTokenizer {
        val reader = BufferedInputStream(System.`in`).bufferedReader()
        return StringTokenizer(reader.use { it.readText() })
    }
    val tokens = iterateTokens()
    val N = tokens.nextToken().toLong()
    val A = LongArray(N.toInt())
    val B = LongArray(N.toInt())
    for (i in 0 until N.toInt()) {
        A[i] = tokens.nextToken().toLong()
        B[i] = tokens.nextToken().toLong()
    }
    solve(N, A, B)
}

fun solve(N: Long, A: LongArray, B: LongArray) {
    val n = N.toInt()
    val ab = Array<Pair<Long, Long>>(n) {
            A[it] to B[it]
        }.sortedBy { it.second }
    var time = 0L
    for (i in 0 until n) {
        time += ab[i].first
        if (time > ab[i].second) {
            println(NO)
            return
        }
    }
    println(YES)
    return
}
