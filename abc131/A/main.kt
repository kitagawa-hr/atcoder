import java.io.BufferedInputStream
import java.util.StringTokenizer

class FastScanner(){
    private var st: StringTokenizer? = null
    fun next(): String {
        while (!(st?.hasMoreTokens() ?: false)) st = StringTokenizer(readLine()!!)
        return st!!.nextToken()
    }
}

class Scanner(){
    private val reader = BufferedInputStream(System.`in`).bufferedReader()
    private val st = StringTokenizer(reader.use { it.readText() })
    fun next() = st.nextToken()
}
// fun tokens() = sequence {
//     var line: String? = ""
//     while(true){
//         line = readLine()
//         if (line == null){break}
//         yieldAll(line.splitToSequence(" ", "\n"))
//     }
// }

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    // fun iterateTokens(): Iterator<String> {
    //     val reader = BufferedInputStream(System.`in`).bufferedReader()
    //     return reader.use{ it.readText() }.split("\n| ".toRegex()).iterator()
    // }
    fun iteratetTokens() = sequence {
        while(true){
            val line = readLine() ?: break
            yieldAll(line.splitToSequence(" ", "\n"))
        }
}
    val tokens = FastScanner()
    val S = tokens.next()
    solve(S)
}

fun solve(S: String){
    for (i in 1 until S.length){
        if (S[i] == S[i-1]){
            println("Bad")
            return
            }
    }
    println("Good")
    return
}

