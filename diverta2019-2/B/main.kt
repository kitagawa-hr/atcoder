import java.io.BufferedInputStream


// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }

    fun iterateTokens(): Iterator<String> {
        val reader = BufferedInputStream(System.`in`).bufferedReader()
        val iterator = reader.lineSequence().map { it.split(" ") }.reduce { left, right -> left + right }.iterator()
        return iterator
    }

    val tokens: Iterator<String> = iterateTokens()
    val N = tokens.next().toInt()
    val x = LongArray(N.toInt())
    val y = LongArray(N.toInt())
    for (i in 0 until N.toInt()) {
        x[i] = tokens.next().toLong()
        y[i] = tokens.next().toLong()
    }
    solve(N, x, y)
}

fun solve(N: Int, x: LongArray, y: LongArray) {
    var cost = 0
    val map = mutableMapOf<Pair<Long, Long>, Int>().withDefault { 0 }
    for (i in 1 until N) {
        var dx = x[i] - x[i - 1]
        var dy = y[i] - y[i - 1]
        var pair = Pair(dx, dy)
        map[pair] = (map[pair] ?: 0) + 1
    }
    val minus = map.maxBy { it.value }?.value ?: 0
    println(N - minus)
    return
}

