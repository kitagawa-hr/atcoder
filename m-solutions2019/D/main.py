#!/usr/bin/env python3
import sys
from collections import defaultdict


def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    if N == 1:
        print(0)
        print(c[0])
        return
    c = sorted(c)
    nodes = defaultdict(list)
    for _a, _b in zip(a, b):
        nodes[_a].append(_b)
        nodes[_b].append(_a)
    unions = sorted([(k, len(v)) for k, v in nodes.items()], key=lambda x: x[1])
    
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a, b, c)


if __name__ == "__main__":
    main()
