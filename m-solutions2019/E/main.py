#!/usr/bin/env python3
import sys

from math import factorial

MOD = 1000003  # type: int

factorials = [1]
for i in range(1, MOD):
    factorials.append(factorials[i - 1] * i)

# def mod_inv(n, p):
#     """mod pにおけるnの逆元を求める

#     nとpは互いに素
#     """

#     b = p

#     u = 1
#     v = 0
#     while b:
#         t = n // b
#         n -= t * b
#         u -= t * v
#         (n, b) = (b, n)
#         (u, v) = (v, u)
#     return u % p


def mod_inv(n, p):
    return pow(n, p - 2, p)


def calc(x, d, n):
    if x == 0:
        return 0
    if d == 0:
        return pow(x, n) % MOD
    inv = mod_inv(d, MOD)
    # ans = d**n * nn!/(x*inv - 1)! % MOD
    nn = (x * inv + n - 1) % MOD
    return d ** n(factorials[nn] / factorials[x * inv - 1]) % MOD


# prod(x, x + d, x + 2d, ...) % p = d**n * (x/d +n-1)!/(x/d -1)! % p
def solve(Q: int, x: "List[int]", d: "List[int]", n: "List[int]"):
    for q in range(Q):
        print(calc(x[q], d[q], n[q]))
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    Q = int(next(tokens))  # type: int
    x = [int()] * (Q)  # type: "List[int]"
    d = [int()] * (Q)  # type: "List[int]"
    n = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        x[i] = int(next(tokens))
        d[i] = int(next(tokens))
        n[i] = int(next(tokens))
    solve(Q, x, d, n)


if __name__ == "__main__":
    main()
