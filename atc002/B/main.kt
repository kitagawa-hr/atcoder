import java.io.BufferedInputStream
import java.io.InputStream
import java.util.StringTokenizer

// N ~ N^(2^47)までのmod Mを求める
fun build(N: Long, M: Long): List<Long> {
    val deque = mutableListOf<Long>()
    deque.add(N % M)
    for (i in 1..47) {
        var last = deque.last()
        deque.add((last*last) % M)
    }
    return deque
}

fun getTwoDim(x: Long): Pair<Int, Long> {
    var i = 1L
    var j = 0
    while (x >= i) {
        i *= 2
        j++
    }
    return Pair(j - 1, x - i / 2L)
}

// N ^ P % M を求める
fun solve(N: Long, M: Long, P: Long) {
    val rests = build(N, M)
    val lis = mutableListOf<Int>()
    var n = P
    while (n > 0){
        var (dim, rest) = getTwoDim(n)
        lis.add(dim)
        n = rest
    }
    // print(lis)
    // print(rests)
    val mods = lis.map{ rests[it] }
    var ans = 1L
    for (mod in mods){
        ans = (ans * mod) % M
    }
    println(ans)
    return
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    class Scanner(stream: InputStream) {
        private val reader = BufferedInputStream(stream).bufferedReader()
        private var st: StringTokenizer? = null
        fun next(): String {
            while (!(st?.hasMoreTokens() ?: false)) st = StringTokenizer(reader.readLine())
            return st!!.nextToken()
        }
    }
    val sc = Scanner(System.`in`)
    val N = sc.next().toLong()
    val M = sc.next().toLong()
    val P = sc.next().toLong()
    solve(N, M, P)
}
