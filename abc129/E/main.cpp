#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template <typename T>
inline string toString(const T &a)
{
    ostringstream oss;
    oss << a;
    return oss.str();
}

template <typename A, size_t N, typename T>
void fillArray(A (&array)[N], const T &val)
{
    std::fill((T *)array, (T *)(array + N), val);
}

const ll MOD = 1000000007;
ll dp[2][1000005];

void solve(long long L)
{
    fillArray(dp, 0);
    dp[0][0] = 1;
    dp[1][0] = 2;
    string sL = toString(L);
    ll sz = sL.size();
    for (ll i = 1; i < sz; i++)
    {
        if (sL[i] == '1')
        {
            dp[1][i] = dp[1][i - 1] * 2;
            dp[0][i] = dp[0][i - 1] * 3 + dp[1][i - 1];
        }
        else
        {
            dp[1][i] = dp[1][i - 1];
            dp[0][i] = dp[0][i - 1] * 3;
        }
        dp[0][i] %= MOD;
        dp[1][i] %= MOD;
    }
    cout << dp[0][sz - 1] + dp[1][sz - 1] << endl;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    long long L;
    scanf("%lld", &L);
    solve(L);
    return 0;
}
