#include <bits/stdc++.h>
using namespace std;

long long vsum(vector<long long> v)
{
    return accumulate(v.begin(), v.end(), 0LL);
}

void solve(long long N, long long M, std::vector<long long> A, std::vector<long long> B, std::vector<long long> C)
{
    sort(A.begin(), A.end());
    vector<long long> D;
    for (int m = 0; m < M; m++)
    {
        long long b = B.at(m);
        long long c = C.at(m);
        for (int i = 0; i < b; i++)
        {
            D.push_back(c);
        }
    }
    sort(D.begin(), D.end(), greater<long long>());
    int r = 0;
    while (A[r] < D[r])
    {
        r++;
        if (r >= D.size() || r >= A.size())
        {
            break;
        }
    }
    cout << accumulate(A.begin() + r, A.end(), 0LL) + accumulate(D.begin(), D.begin() + r, 0LL) << endl;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    long long N;
    scanf("%lld", &N);
    long long M;
    scanf("%lld", &M);
    std::vector<long long> A(N);
    for (int i = 0; i < N; i++)
    {
        scanf("%lld", &A[i]);
    }
    std::vector<long long> B(M);
    std::vector<long long> C(M);
    for (int i = 0; i < M; i++)
    {
        scanf("%lld", &B[i]);
        scanf("%lld", &C[i]);
    }
    solve(N, M, std::move(A), std::move(B), std::move(C));
    return 0;
}
