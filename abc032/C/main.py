#!/usr/bin/env python3
import sys

from functools import reduce
from operator import mul


def length(left, right):
    return right - left


def two_pointers(s, K):
    ans = 0
    left = 0
    right = 0
    product = 1
    for left in range(0, len(s)):
        while True:
            if right >= len(s) or product * s[right] > K:
                break
            product *= s[right]
            right += 1
        # print(left, right , product)
        product = product // s[left]
        ans = max(ans, length(left, right))
    return ans


def solve(N: int, K: int, s: "List[int]"):
    if 0 in s:
        print(N)
        return
    if min(s) > K:
        print(0)
        return
    ans = two_pointers(s, K)
    print(ans)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    s = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, s)


if __name__ == "__main__":
    main()
