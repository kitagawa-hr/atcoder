#!/usr/bin/env python3
import sys

# sum(w)<=Wとなる条件下でsum(v)を最大化

val_dp = {}


def value_dp(i, v, vw):
    # dp[i][v] := iまでを用いてvalue>=vを達成するwの最小値
    # dp[i+1][v] = min(dp[i][v], dp[i][v-v_k] + w_k)
    if val_dp.get(i).get(b):
        return val_dp[i][v]
    if i == 0:
        return 0
    return min(
        value_dp(i - 1)(v),
        *[value_dp(i - 1, v - vw[0][j]) + vw[1][j] for j in range(len(vw[0]))],
    )


def solve(N: int, W: int, v: "List[int]", w: "List[int]"):
    if min(w) > W:
        print(0)
        return
    if N == 1:
        print(v[0])
        return

    vw = sorted(zip(v, w), key=lambda x: x[1])
    print(value_dp(i, v, vw))

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    v = [int()] * (N)  # type: "List[int]"
    w = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    solve(N, W, v, w)


if __name__ == "__main__":
    main()
