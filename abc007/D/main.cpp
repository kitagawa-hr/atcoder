#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

template <typename T>
inline string toString(const T &a)
{
    ostringstream oss;
    oss << a;
    return oss.str();
};

template <typename A, size_t N, typename T>
void fill_array(A (&array)[N], const T &val)
{
    std::fill((T *)array, (T *)(array + N), val);
}

long long dp[32][2][2];
// dp[ 決めた桁数 ][ 未満フラグ ][ 4 または 9 を含むか ] := 総数

long long solve(const string &S)
{
    const int L = S.size();
    fill_array(dp, 0);
    dp[0][0][0] = 1;

    for (int i = 0; i < L; ++i)
    {
        const int D = S[i] - '0';

        for (int j = 0; j < 2; ++j)
        {
            for (int k = 0; k < 2; ++k)
            {
                for (int d = 0; d <= (j ? 9 : D); ++d)
                {
                    dp[i + 1][j || (d < D)][k || d == 4 || d == 9] += dp[i][j][k];
                }
            }
        }
    }

    return dp[L][0][1] + dp[L][1][1];
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    long long A;
    scanf("%lld", &A);
    long long B;
    scanf("%lld", &B);
    cout << solve(toString(B)) - solve(toString(A - 1)) << endl;
    return 0;
}
