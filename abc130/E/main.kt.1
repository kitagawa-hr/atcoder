import java.io.BufferedInputStream
import java.util.StringTokenizer

const val MOD = 1000000007

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    class Scanner() {
        private val reader = BufferedInputStream(System.`in`).bufferedReader()
        private val st = StringTokenizer(reader.use { it.readText() })
        fun next() = st.nextToken()
        fun nextInt() = st.nextToken().toInt()
        fun nextLong() = st.nextToken().toLong()
        fun nextDouble() = st.nextToken().toDouble()
    }
    val tokens = Scanner()
    val N = tokens.next().toLong()
    val M = tokens.next().toLong()
    val S = LongArray(N.toInt())
    for (i in 0 until N.toInt()) {
        S[i] = tokens.next().toLong()
    }
    val T = LongArray(M.toInt())
    for (i in 0 until M.toInt()) {
        T[i] = tokens.next().toLong()
    }
    solve(N, M, S, T)
}

fun solve(N: Long, M: Long, S: LongArray, T: LongArray) {
    // dp[i][j] -> S, Tのi, j番目以降を用いる
    val (n, m) = Pair(N.toInt(), M.toInt())
    var dp = Array<LongArray>(n) { LongArray(m) { 1L } }
    for (i in n - 2 downTo 0) {
        for (j in m - 2 downTo 0) {
            val s = S[i]
            val t = T[j]
            var idx = i
            while (T.getOrElse(idx) { s } != s) { idx++ }
            dp[i][j] = (dp[i + 1].getOrElse(idx){ 2 } + dp[i + 1][j]) % MOD
            if (s == t) { dp[i][j] += dp[i + 1][j + 1] % MOD }
        }
    }
    println(dp[0][0])
    return
}
